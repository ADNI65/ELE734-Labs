%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 2550 3300 300 pap
%%Page: cds 1
gis
0 0 2549 1484 clwin
ssls
0 0 0 slc
0 0 0 sfc
35 1458 dlt
0 -29 dlv
1 -7 dlv
2 -5 dlv
5 -1 dlv
11 0 dlv
5 1 dlv
2 5 dlv
1 7 dlv
0 29 dlv
dle
74 1423 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 4 dlv
0 7 dlv
0 4 dlv
-4 3 dlv
-18 2 dlv
-2 3 dlv
-1 4 dlv
0 5 dlv
1 4 dlv
3 3 dlv
16 0 dlv
4 -3 dlv
1 -4 dlv
dle
136 1416 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 135 1438 dls
148 1416 dlt
0 42 dlv
21 0 dlv
4 -3 dlv
0 -4 dlv
0 -10 dlv
0 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
169 1434 dlt
4 -2 dlv
0 -5 dlv
0 -11 dlv
dle
188 1440 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
188 1420 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
211 1440 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
231 1429 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
264 1437 dlt
-1 6 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
11 0 dlv
4 3 dlv
1 5 dlv
dle
0 -42 264 1458 dls
0 30 276 1416 dls
276 1437 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
0 30 308 1416 dls
0 4 308 1454 dls
320 1440 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
340 1429 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
353 1446 dlt
18 0 dlv
-19 -30 dlv
19 0 dlv
dle
35 1349 dlt
0 42 dlv
20 0 dlv
5 -1 dlv
3 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
-20 0 dlv
dle
76 1349 dlt
15 42 dlv
16 -42 dlv
dle
-22 0 102 1360 dls
25 0 119 1391 dls
0 -42 132 1391 dls
180 1349 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 179 1371 dls
195 1373 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
195 1353 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
217 1391 dlt
12 -42 dlv
12 42 dlv
12 -42 dlv
12 42 dlv
dle
276 1365 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
330 1370 dlt
-1 6 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
11 0 dlv
4 3 dlv
1 5 dlv
dle
0 -42 330 1391 dls
360 1349 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
11 0 dlv
6 -1 dlv
3 -5 dlv
1 -8 dlv
0 -14 dlv
-1 -8 dlv
-3 -5 dlv
-6 -1 dlv
-11 0 dlv
dle
413 1370 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
19 0 425 1379 dls
430 1387 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
466 1376 dlt
12 15 dlv
0 -42 dlv
dle
491 1383 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
537 1383 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
573 1376 dlt
12 15 dlv
0 -42 dlv
dle
600 1373 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
600 1353 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
614 1376 dlt
12 15 dlv
0 -42 dlv
dle
638 1357 dlt
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 26 dlv
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -7 dlv
1 -6 dlv
3 -3 dlv
16 0 dlv
4 3 dlv
1 6 dlv
dle
678 1373 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
678 1353 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
692 1356 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
729 1356 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
776 1383 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
821 1349 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 812 1349 dls
851 1383 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
888 1383 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
35 1281 dlt
0 42 dlv
21 0 dlv
4 -2 dlv
1 -5 dlv
0 -10 dlv
-1 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
73 1323 dlt
0 -42 dlv
21 0 dlv
dle
115 1281 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
11 0 dlv
6 -1 dlv
3 -5 dlv
1 -8 dlv
0 -14 dlv
-1 -8 dlv
-3 -5 dlv
-6 -1 dlv
-11 0 dlv
dle
25 0 148 1323 dls
0 -42 161 1323 dls
194 1288 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 4 dlv
0 7 dlv
0 4 dlv
-4 3 dlv
-18 2 dlv
-2 3 dlv
-1 4 dlv
0 5 dlv
1 4 dlv
3 3 dlv
16 0 dlv
4 -3 dlv
1 -4 dlv
dle
0 42 232 1281 dls
245 1323 dlt
25 0 dlv
-26 -42 dlv
27 0 dlv
dle
307 1281 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 306 1303 dls
322 1305 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
322 1285 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
371 1292 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
388 1281 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
420 1304 dlt
5 -3 dlv
0 -4 dlv
0 -9 dlv
0 -4 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 4 dlv
0 9 dlv
1 4 dlv
4 3 dlv
15 0 dlv
4 2 dlv
1 5 dlv
0 5 dlv
-1 4 dlv
-4 3 dlv
-15 0 dlv
-3 -3 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
3 -3 dlv
dle
446 1281 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 437 1281 dls
20 30 484 1281 dls
20 -30 485 1311 dls
526 1308 dlt
12 15 dlv
0 -42 dlv
dle
550 1308 dlt
12 15 dlv
0 -42 dlv
dle
579 1281 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
600 1281 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 591 1281 dls
638 1281 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 629 1281 dls
0 42 676 1281 dls
0 30 688 1281 dls
688 1302 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
740 1302 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
0 42 752 1281 dls
752 1302 dlt
2 6 dlv
3 3 dlv
9 0 dlv
4 -3 dlv
2 -6 dlv
0 -21 dlv
dle
784 1297 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
817 1287 dlt
2 -5 dlv
3 -1 dlv
10 0 dlv
4 1 dlv
1 3 dlv
0 7 dlv
-1 3 dlv
-4 2 dlv
-10 0 dlv
-3 1 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 2 dlv
10 0 dlv
4 -2 dlv
1 -4 dlv
dle
35 1213 dlt
0 42 dlv
18 -42 dlv
18 43 dlv
0 -43 dlv
dle
83 1237 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
103 1226 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
116 1206 dlt
4 -3 dlv
11 0 dlv
3 3 dlv
2 5 dlv
0 32 dlv
dle
136 1234 dlt
-2 6 dlv
-3 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -9 dlv
2 -7 dlv
3 -3 dlv
11 0 dlv
4 3 dlv
1 6 dlv
dle
0 30 148 1213 dls
148 1234 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
0 30 180 1213 dls
0 4 180 1251 dls
197 1213 dlt
0 37 dlv
2 4 dlv
4 1 dlv
3 0 dlv
dle
15 0 192 1240 dls
0 30 219 1213 dls
0 4 219 1251 dls
251 1234 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
263 1237 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
283 1226 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
19 0 295 1243 dls
300 1251 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
0 30 327 1213 dls
0 4 327 1251 dls
344 1213 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
0 30 372 1213 dls
372 1234 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
407 1237 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
407 1217 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
430 1248 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
451 1236 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
467 1220 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
513 1213 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 504 1213 dls
542 1248 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
563 1236 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
599 1236 dlt
5 -3 dlv
0 -4 dlv
0 -9 dlv
0 -4 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 4 dlv
0 9 dlv
1 4 dlv
4 3 dlv
15 0 dlv
4 2 dlv
1 5 dlv
0 5 dlv
-1 4 dlv
-4 3 dlv
-15 0 dlv
-3 -3 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
3 -3 dlv
dle
621 1213 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
653 1236 dlt
5 -3 dlv
0 -4 dlv
0 -9 dlv
0 -4 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 4 dlv
0 9 dlv
1 4 dlv
4 3 dlv
15 0 dlv
4 2 dlv
1 5 dlv
0 5 dlv
-1 4 dlv
-4 3 dlv
-15 0 dlv
-3 -3 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
3 -3 dlv
dle
690 1236 dlt
5 -3 dlv
0 -4 dlv
0 -9 dlv
0 -4 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 4 dlv
0 9 dlv
1 4 dlv
4 3 dlv
15 0 dlv
4 2 dlv
1 5 dlv
0 5 dlv
-1 4 dlv
-4 3 dlv
-15 0 dlv
-3 -3 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
3 -3 dlv
dle
28 42 707 1213 dls
28 -42 708 1255 dls
35 1188 dlt
0 -42 dlv
21 0 dlv
dle
0 30 68 1146 dls
0 4 68 1184 dls
0 42 80 1146 dls
80 1167 dlt
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
-3 3 dlv
-2 5 dlv
dle
0 30 113 1146 dls
113 1167 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
142 1170 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
162 1159 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
0 30 174 1146 dls
174 1167 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
203 1176 dlt
10 -30 dlv
10 30 dlv
dle
213 1146 dlt
-2 -6 dlv
-3 -4 dlv
-2 0 dlv
dle
238 1170 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
238 1150 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
0 42 270 1146 dls
282 1170 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
302 1159 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
0 42 314 1146 dls
314 1167 dlt
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
-3 3 dlv
-2 5 dlv
dle
347 1173 dlt
12 15 dlv
0 -42 dlv
dle
63 1109 dlt
-1 6 dlv
-2 4 dlv
-5 1 dlv
-12 0 dlv
-5 -1 dlv
-2 -5 dlv
-1 -8 dlv
0 -14 dlv
1 -9 dlv
2 -4 dlv
5 -1 dlv
12 0 dlv
5 1 dlv
2 5 dlv
1 5 dlv
dle
75 1094 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
0 42 108 1078 dls
0 42 120 1078 dls
135 1102 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
135 1082 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
0 30 275 1078 dls
275 1099 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
0 30 307 1078 dls
307 1099 dlt
2 6 dlv
3 3 dlv
7 0 dlv
3 -3 dlv
2 -6 dlv
0 -21 dlv
dle
324 1099 dlt
2 6 dlv
3 3 dlv
7 0 dlv
3 -3 dlv
2 -6 dlv
0 -21 dlv
dle
358 1078 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
386 1084 dlt
2 -5 dlv
3 -1 dlv
10 0 dlv
4 1 dlv
1 3 dlv
0 7 dlv
-1 3 dlv
-4 2 dlv
-10 0 dlv
-3 1 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 2 dlv
10 0 dlv
4 -2 dlv
1 -4 dlv
dle
418 1105 dlt
12 15 dlv
0 -42 dlv
dle
35 1053 dlt
14 -42 dlv
15 42 dlv
dle
0 30 76 1011 dls
0 4 76 1049 dls
88 1027 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
121 1041 dlt
8 -30 dlv
7 30 dlv
8 -30 dlv
8 30 dlv
dle
167 1035 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
167 1015 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
0 42 280 1011 dls
292 1035 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
312 1024 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
324 1041 dlt
10 -30 dlv
10 30 dlv
dle
334 1011 dlt
-2 -6 dlv
-3 -4 dlv
-2 0 dlv
dle
361 1011 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
389 1041 dlt
0 -21 dlv
2 -6 dlv
3 -3 dlv
9 0 dlv
4 3 dlv
2 5 dlv
dle
0 -30 409 1041 dls
19 0 421 1041 dls
426 1049 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
35 943 dlt
0 42 dlv
21 0 dlv
4 -2 dlv
1 -5 dlv
0 -10 dlv
-1 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
0 42 73 943 dls
90 943 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
19 0 118 973 dls
123 981 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
159 943 dlt
15 42 dlv
16 -42 dlv
dle
-22 0 185 954 dls
0 30 202 943 dls
202 964 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
231 959 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
264 967 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
284 956 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
299 967 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
299 947 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
340 985 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
361 985 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
21 0 375 961 dls
419 943 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 410 943 dls
453 943 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
465 970 dlt
12 15 dlv
0 -42 dlv
dle
514 977 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
21 0 537 961 dls
573 977 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
614 943 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
626 951 dlt
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 26 dlv
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -7 dlv
1 -6 dlv
3 -3 dlv
16 0 dlv
4 3 dlv
1 6 dlv
dle
672 943 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 663 943 dls
701 978 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
722 966 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
738 985 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
777 985 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
789 978 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
810 966 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
831 943 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
843 978 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
864 966 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
881 977 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
917 970 dlt
12 15 dlv
0 -42 dlv
dle
950 950 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
992 943 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
1013 943 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 1004 943 dls
1042 985 dlt
26 0 dlv
-19 -42 dlv
dle
1080 970 dlt
12 15 dlv
0 -42 dlv
dle
1104 985 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
1125 985 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
29 572 383 808 clwin
1000 1000 1000 slc
1000 1000 1000 sfc
118 295 38 681 dbu
295 118 38 681 dls
295 -118 38 799 dls
0 0 0 slc
0 0 0 sfc
0 15 41 649 dls
41 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
50 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
65 661 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
76 655 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
2 0 dlv
1 2 dlv
dle
0 15 82 649 dls
82 660 dlt
2 3 dlv
1 1 dlv
3 0 dlv
2 -1 dlv
1 -4 dlv
dle
0 22 97 649 dls
97 657 dlt
2 0 dlv
7 7 dlv
dle
8 -8 99 657 dls
113 657 dlt
11 0 dlv
0 2 dlv
-1 4 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
1 2 dlv
dle
0 15 130 649 dls
130 660 dlt
2 3 dlv
1 1 dlv
4 0 dlv
1 -1 dlv
1 -4 dlv
dle
150 657 dlt
11 0 dlv
0 2 dlv
0 4 dlv
-2 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 2 dlv
dle
0 15 168 649 dls
168 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
1 -1 dlv
1 -4 dlv
dle
0 15 183 649 dls
183 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -4 dlv
dle
201 649 dlt
-2 1 dlv
-1 4 dlv
0 6 dlv
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -4 dlv
0 -5 dlv
-1 -4 dlv
-2 -1 dlv
-5 0 dlv
dle
0 15 215 649 dls
215 660 dlt
2 3 dlv
1 1 dlv
4 0 dlv
1 -1 dlv
1 -4 dlv
dle
385 572 739 808 clwin
1000 1000 1000 slc
1000 1000 1000 sfc
118 296 393 681 dbu
0 0 0 slc
0 0 0 sfc
10 0 397 664 dls
399 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
2 0 dlv
2 0 dlv
1 3 dlv
0 2 dlv
dle
413 657 dlt
11 0 dlv
0 2 dlv
0 4 dlv
-2 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 2 dlv
dle
10 15 431 649 dls
11 -15 431 664 dls
10 0 448 664 dls
451 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
1 0 dlv
2 0 dlv
2 3 dlv
0 2 dlv
dle
481 660 dlt
-1 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 3 dlv
dle
0 -22 481 671 dls
0 15 487 649 dls
487 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -4 dlv
dle
502 661 dlt
1 2 dlv
2 1 dlv
4 0 dlv
3 -1 dlv
1 -2 dlv
0 -12 dlv
dle
513 655 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
2 0 dlv
1 2 dlv
dle
519 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
4 15 dlv
dle
0 15 541 649 dls
0 3 541 668 dls
0 15 548 649 dls
548 660 dlt
1 3 dlv
1 1 dlv
6 0 dlv
2 -1 dlv
0 -3 dlv
0 -11 dlv
dle
565 645 dlt
2 -2 dlv
6 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
576 660 dlt
-1 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
1 -2 dlv
6 0 dlv
2 2 dlv
1 3 dlv
dle
740 572 1094 808 clwin
1 fds
1 <0000> fdf
1 <1111> fdf
1 <0000> fdf
1 <4444> fdf
1 <0000> fdf
1 <1111> fdf
1 <0000> fdf
1 <4444> fdf
1 <0000> fdf
1 <1111> fdf
1 <0000> fdf
1 <4444> fdf
1 <0000> fdf
1 <1111> fdf
1 <0000> fdf
1 <4444> fdf
1 fde
1 sfp
0 0 1000 slc
0 0 1000 sfc
749 681 1044 799 dbf
118 295 749 681 dbu
0 0 0 slc
0 0 0 sfc
0 15 752 649 dls
752 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
761 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
776 657 dlt
11 0 dlv
0 2 dlv
0 4 dlv
-2 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 2 dlv
dle
10 0 794 664 dls
796 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
2 0 dlv
2 0 dlv
1 3 dlv
0 2 dlv
dle
810 661 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
821 655 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
2 0 dlv
1 2 dlv
dle
0 22 827 649 dls
833 663 dlt
7 8 dlv
0 -22 dlv
dle
862 660 dlt
-1 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 3 dlv
dle
0 -22 862 671 dls
0 15 868 649 dls
868 660 dlt
2 3 dlv
1 1 dlv
3 0 dlv
2 -1 dlv
1 -4 dlv
dle
883 661 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
894 655 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
2 0 dlv
1 2 dlv
dle
900 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
4 15 dlv
dle
0 15 923 649 dls
0 3 923 668 dls
0 15 929 649 dls
929 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
0 -3 dlv
0 -11 dlv
dle
946 645 dlt
2 -2 dlv
6 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
957 660 dlt
-1 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
1 -2 dlv
6 0 dlv
2 2 dlv
1 3 dlv
dle
1096 572 1450 808 clwin
2 fds
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 fde
2 sfp
549 549 651 slc
702 702 702 sfc
1104 681 1400 799 dbf
118 296 1104 681 dbu
0 0 0 slc
0 0 0 sfc
0 21 1108 643 dls
1108 660 dlt
1 3 dlv
1 1 dlv
6 0 dlv
2 -1 dlv
1 -4 dlv
0 -5 dlv
-1 -4 dlv
-2 -1 dlv
-6 0 dlv
-1 1 dlv
-1 3 dlv
dle
0 21 1125 643 dls
1125 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -4 dlv
0 -5 dlv
-1 -4 dlv
-2 -1 dlv
-5 0 dlv
-2 1 dlv
-1 3 dlv
dle
0 22 1142 649 dls
1149 664 dlt
0 -11 dlv
1 -3 dlv
1 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
0 -15 1159 664 dls
1165 652 dlt
1 -3 dlv
2 0 dlv
5 0 dlv
2 0 dlv
1 2 dlv
0 3 dlv
-1 2 dlv
-2 1 dlv
-5 0 dlv
-2 0 dlv
-1 2 dlv
0 3 dlv
1 1 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
dle
1198 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
0 -22 1198 671 dls
0 15 1204 649 dls
1204 660 dlt
2 3 dlv
1 1 dlv
4 0 dlv
1 -1 dlv
1 -4 dlv
dle
1219 661 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
1230 655 dlt
-1 1 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
2 0 dlv
5 0 dlv
2 0 dlv
1 2 dlv
dle
1236 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
5 15 dlv
dle
0 15 1259 649 dls
0 3 1259 668 dls
0 15 1265 649 dls
1265 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
1282 645 dlt
3 -2 dlv
5 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
1293 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
2 -2 dlv
5 0 dlv
2 2 dlv
1 3 dlv
dle
1451 572 1805 808 clwin
1000 1000 0 slc
1000 1000 0 sfc
118 295 1460 681 dbu
295 118 1460 681 dls
295 -118 1460 799 dls
0 0 0 slc
0 0 0 sfc
0 15 1463 649 dls
1463 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
1472 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
1487 661 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
1498 655 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
2 0 dlv
1 2 dlv
dle
0 15 1504 649 dls
1504 660 dlt
2 3 dlv
1 1 dlv
3 0 dlv
2 -1 dlv
1 -4 dlv
dle
0 22 1519 649 dls
1519 657 dlt
2 0 dlv
7 7 dlv
dle
8 -8 1521 657 dls
1535 657 dlt
11 0 dlv
0 2 dlv
0 4 dlv
-3 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 2 dlv
dle
0 15 1552 649 dls
1552 660 dlt
2 3 dlv
2 1 dlv
3 0 dlv
1 -1 dlv
1 -4 dlv
dle
1572 664 dlt
5 -15 dlv
3 15 dlv
4 -15 dlv
5 15 dlv
dle
1595 661 dlt
1 2 dlv
2 1 dlv
4 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
1605 655 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
1 0 dlv
1 2 dlv
dle
0 15 1612 649 dls
1612 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -4 dlv
dle
0 15 1627 649 dls
1627 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
0 -3 dlv
0 -11 dlv
dle
0 15 1644 649 dls
0 3 1644 668 dls
0 15 1650 649 dls
1650 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
1667 645 dlt
2 -2 dlv
6 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
1678 660 dlt
-1 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
1 -2 dlv
6 0 dlv
2 2 dlv
1 3 dlv
dle
1807 572 2161 808 clwin
1000 1000 1000 slc
549 549 651 sfc
1816 681 2111 799 dbs
0 0 0 slc
0 0 0 sfc
1829 660 dlt
0 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
0 3 dlv
dle
1838 649 dlt
-1 1 dlv
-2 4 dlv
0 6 dlv
2 3 dlv
1 1 dlv
6 0 dlv
2 -1 dlv
0 -4 dlv
0 -5 dlv
0 -4 dlv
-2 -1 dlv
-6 0 dlv
dle
0 15 1853 649 dls
1853 660 dlt
1 3 dlv
1 1 dlv
6 0 dlv
2 -1 dlv
0 -3 dlv
0 -11 dlv
dle
10 0 1870 664 dls
1872 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
2 0 dlv
2 0 dlv
1 3 dlv
0 2 dlv
dle
1886 661 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
1897 655 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
2 0 dlv
1 2 dlv
dle
1914 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
10 0 1920 664 dls
1923 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
1 0 dlv
2 0 dlv
1 3 dlv
0 2 dlv
dle
1953 660 dlt
-1 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 3 dlv
dle
0 -22 1953 671 dls
0 15 1959 649 dls
1959 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -4 dlv
dle
1974 661 dlt
1 2 dlv
2 1 dlv
4 0 dlv
3 -1 dlv
1 -2 dlv
0 -12 dlv
dle
1985 655 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
2 0 dlv
1 2 dlv
dle
1991 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
4 15 dlv
dle
0 15 2013 649 dls
0 3 2013 668 dls
0 15 2020 649 dls
2020 660 dlt
1 3 dlv
1 1 dlv
6 0 dlv
2 -1 dlv
0 -3 dlv
0 -11 dlv
dle
2037 645 dlt
2 -2 dlv
6 0 dlv
1 2 dlv
2 2 dlv
0 17 dlv
dle
2048 660 dlt
-2 3 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
1 -2 dlv
6 0 dlv
2 2 dlv
1 3 dlv
dle
2162 572 2517 808 clwin
3 fds
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 fde
3 sfp
149 549 420 slc
0 800 400 sfc
2171 681 2466 799 dbf
118 295 2171 681 dbu
0 0 0 slc
0 0 0 sfc
0 15 2174 649 dls
2174 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
0 21 2191 643 dls
2191 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -4 dlv
0 -5 dlv
-1 -4 dlv
-2 -1 dlv
-5 0 dlv
-2 1 dlv
-1 3 dlv
dle
0 22 2208 649 dls
2215 664 dlt
0 -11 dlv
1 -3 dlv
1 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
0 -15 2225 664 dls
2231 652 dlt
1 -3 dlv
2 0 dlv
5 0 dlv
2 0 dlv
1 2 dlv
0 3 dlv
-1 2 dlv
-2 1 dlv
-5 0 dlv
-2 0 dlv
-1 2 dlv
0 3 dlv
1 1 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
dle
2264 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
0 -22 2264 671 dls
0 15 2270 649 dls
2270 660 dlt
2 3 dlv
1 1 dlv
4 0 dlv
1 -1 dlv
1 -4 dlv
dle
2285 661 dlt
2 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
2296 655 dlt
-1 1 dlv
-2 1 dlv
-5 0 dlv
-1 -1 dlv
-2 -1 dlv
0 -4 dlv
2 -2 dlv
1 0 dlv
5 0 dlv
2 0 dlv
1 2 dlv
dle
2302 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
5 15 dlv
dle
0 15 2325 649 dls
0 3 2325 668 dls
0 15 2331 649 dls
2331 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
2348 645 dlt
3 -2 dlv
5 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
2359 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
2 -2 dlv
5 0 dlv
2 2 dlv
1 3 dlv
dle
29 334 383 571 clwin
4 fds
4 <0000> fdf
4 <0000> fdf
4 <f1f1> fdf
4 <1111> fdf
4 <1111> fdf
4 <1f1f> fdf
4 <0000> fdf
4 <0000> fdf
4 <0000> fdf
4 <0000> fdf
4 <f1f1> fdf
4 <1111> fdf
4 <1111> fdf
4 <1f1f> fdf
4 <0000> fdf
4 <0000> fdf
4 fde
4 sfp
149 549 420 slc
149 549 420 sfc
38 444 333 562 dbf
118 295 38 444 dbu
0 0 0 slc
0 0 0 sfc
41 424 dlt
1 2 dlv
2 1 dlv
4 0 dlv
2 -1 dlv
2 -2 dlv
0 -13 dlv
dle
52 418 dlt
-2 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
6 0 dlv
1 1 dlv
2 1 dlv
dle
68 422 dlt
0 3 dlv
-2 2 dlv
-6 0 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
6 0 dlv
2 2 dlv
0 2 dlv
dle
10 0 75 427 dls
77 431 dlt
0 -17 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
0 3 dlv
dle
0 16 91 411 dls
0 2 91 431 dls
98 427 dlt
6 -16 dlv
5 16 dlv
dle
116 420 dlt
11 0 dlv
0 2 dlv
-1 3 dlv
-2 2 dlv
-6 0 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
7 0 dlv
1 2 dlv
dle
149 422 dlt
-1 3 dlv
-2 2 dlv
-6 0 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
6 0 dlv
2 2 dlv
1 2 dlv
dle
0 -22 149 433 dls
0 16 155 411 dls
155 422 dlt
2 3 dlv
1 2 dlv
3 0 dlv
2 -2 dlv
1 -3 dlv
dle
170 424 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
181 418 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 1 dlv
dle
187 427 dlt
4 -16 dlv
4 16 dlv
4 -16 dlv
4 16 dlv
dle
0 16 210 411 dls
0 2 210 431 dls
0 16 216 411 dls
216 422 dlt
1 3 dlv
1 2 dlv
6 0 dlv
2 -2 dlv
0 -3 dlv
0 -11 dlv
dle
233 407 dlt
2 -1 dlv
6 0 dlv
2 1 dlv
1 3 dlv
0 17 dlv
dle
244 422 dlt
-1 3 dlv
-2 2 dlv
-6 0 dlv
-1 -2 dlv
-1 -3 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 3 dlv
dle
385 334 739 571 clwin
5 fds
5 <0101> fdf
5 <0606> fdf
5 <0808> fdf
5 <3030> fdf
5 <4040> fdf
5 <8181> fdf
5 <0202> fdf
5 <0c0c> fdf
5 <1010> fdf
5 <6060> fdf
5 <8080> fdf
5 <0303> fdf
5 <0404> fdf
5 <1818> fdf
5 <2020> fdf
5 <c0c0> fdf
5 fde
5 sfp
902 122 51 slc
902 122 51 sfc
393 444 689 562 dbf
118 296 393 444 dbu
0 0 0 slc
0 0 0 sfc
0 21 397 406 dls
397 422 dlt
1 3 dlv
1 2 dlv
6 0 dlv
2 -2 dlv
1 -3 dlv
0 -6 dlv
-1 -3 dlv
-2 -2 dlv
-6 0 dlv
-1 2 dlv
-1 3 dlv
dle
417 411 dlt
-2 2 dlv
-1 3 dlv
0 6 dlv
1 3 dlv
2 2 dlv
5 0 dlv
2 -2 dlv
1 -3 dlv
0 -6 dlv
-1 -3 dlv
-2 -2 dlv
-5 0 dlv
dle
0 22 431 411 dls
438 427 dlt
5 -16 dlv
5 16 dlv
dle
443 411 dlt
-1 -3 dlv
-2 -2 dlv
-1 0 dlv
dle
454 425 dlt
7 8 dlv
0 -22 dlv
dle
483 422 dlt
-1 3 dlv
-2 2 dlv
-6 0 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
6 0 dlv
2 2 dlv
1 2 dlv
dle
0 -22 483 433 dls
0 16 489 411 dls
489 422 dlt
2 3 dlv
1 2 dlv
3 0 dlv
2 -2 dlv
1 -3 dlv
dle
504 424 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
515 418 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 1 dlv
dle
521 427 dlt
4 -16 dlv
4 16 dlv
4 -16 dlv
4 16 dlv
dle
0 16 544 411 dls
0 2 544 431 dls
0 16 550 411 dls
550 422 dlt
1 3 dlv
1 2 dlv
6 0 dlv
2 -2 dlv
0 -3 dlv
0 -11 dlv
dle
567 407 dlt
2 -1 dlv
6 0 dlv
2 1 dlv
1 3 dlv
0 17 dlv
dle
578 422 dlt
-1 3 dlv
-2 2 dlv
-6 0 dlv
-1 -2 dlv
-1 -3 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 3 dlv
dle
740 334 1094 571 clwin
0 0 2550 1484 clwin
1484 2549 0 0 dbu
%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 2550 3300 300 pap
nxp
%%Page: cds 1
0 1 1438 3297 clwin
0 1 1438 3297 clwin
0 0 1439 3300 clwin
1 fds
1 <0000> fdf
1 <0000> fdf
1 <f1f1> fdf
1 <1111> fdf
1 <1111> fdf
1 <1f1f> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <f1f1> fdf
1 <1111> fdf
1 <1111> fdf
1 <1f1f> fdf
1 <0000> fdf
1 <0000> fdf
1 fde
1 sfp
149 549 420 slc
149 549 420 sfc
ssls
723 2222 dpb
239 2222 dpv
239 1808 dpv
723 1808 dpv
dpf
723 2222 dpb
239 2222 dpv
239 1808 dpv
723 1808 dpv
dpu
-484 0 723 2015 dls
1223 2222 dpb
1033 2222 dpv
1033 1808 dpv
1223 1808 dpv
dpf
1223 2222 dpb
1033 2222 dpv
1033 1808 dpv
1223 1808 dpv
dpu
-190 0 1223 2015 dls
2 fds
2 <0101> fdf
2 <0606> fdf
2 <0808> fdf
2 <3030> fdf
2 <4040> fdf
2 <8181> fdf
2 <0202> fdf
2 <0c0c> fdf
2 <1010> fdf
2 <6060> fdf
2 <8080> fdf
2 <0303> fdf
2 <0404> fdf
2 <1818> fdf
2 <2020> fdf
2 <c0c0> fdf
2 fde
2 sfp
902 122 51 slc
902 122 51 sfc
442 2412 dpb
442 1444 dpv
516 1444 dpv
516 2412 dpv
dpf
442 2412 dpb
442 1444 dpv
516 1444 dpv
516 2412 dpv
dpu
0 -968 479 2412 dls
392 1271 566 1444 dbf
173 174 392 1271 dbu
3 fds
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 fde
3 sfp
149 549 420 slc
0 800 400 sfc
888 2366 dpb
78 2366 dpv
78 1664 dpv
888 1664 dpv
dpf
888 2366 dpb
78 2366 dpv
78 1664 dpv
888 1664 dpv
dpu
-810 0 888 2015 dls
4 fds
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 fde
4 sfp
549 549 651 slc
702 702 702 sfc
1368 2366 dpb
888 2366 dpv
888 1664 dpv
1368 1664 dpv
dpf
1368 2366 dpb
888 2366 dpv
888 1664 dpv
1368 1664 dpv
dpu
-480 0 1368 2015 dls
1000 1000 1000 slc
549 549 651 sfc
1078 1854 1169 1945 dbs
582 1854 673 1945 dbs
582 2060 673 2151 dbs
1078 2060 1169 2151 dbs
285 1854 376 1945 dbs
285 2060 376 2151 dbs
434 1312 525 1403 dbs
5 fds
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 fde
5 sfp
0 0 1000 slc
0 0 1000 sfc
413 1304 dpb
413 684 dpv
545 684 dpv
545 1304 dpv
dpf
413 1304 dpb
413 684 dpv
545 684 dpv
545 1304 dpv
dpu
0 -620 479 1304 dls
1207 1825 dpb
1207 2771 dpv
1050 2771 dpv
1050 1825 dpv
dpf
1207 1825 dpb
1207 2771 dpv
1050 2771 dpv
1050 1825 dpv
dpu
0 946 1128 1825 dls
702 1825 dpb
702 2771 dpv
545 2771 dpv
545 1825 dpv
dpf
702 1825 dpb
702 2771 dpv
545 2771 dpv
545 1825 dpv
dpu
0 946 624 1825 dls
403 1825 dpb
403 2738 dpv
258 2738 dpv
258 1825 dpv
dpf
403 1825 dpb
403 2738 dpv
258 2738 dpv
258 1825 dpv
dpu
0 913 330 1825 dls
576 2678 671 2773 dbf
95 95 576 2678 dbu
287 2633 382 2728 dbf
95 95 287 2633 dbu
1081 2654 1176 2749 dbf
95 95 1081 2654 dbu
444 711 539 806 dbf
95 95 444 711 dbu
409 1287 549 1428 dbf
141 140 409 1287 dbu
549 549 651 slc
549 549 651 sfc
0 3299 66 0 dls
1438 0 0 1201 dls
1000 1000 1000 slc
1000 1000 1000 sfc
91 91 1078 1854 dbu
gfs
%%Trailer
%%EOF
